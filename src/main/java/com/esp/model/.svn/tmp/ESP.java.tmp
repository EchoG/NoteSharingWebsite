/**
 * 
 */
package com.esp.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.jmx.export.annotation.ManagedResource;
import org.springframework.stereotype.Service;

/**
 * @author Echo
 * 
 */
@Service
@ManagedResource("esp:type=ESP")
public class ESP {

	private SimpleJdbcTemplate simpleJdbcTemplate;

	@Autowired
	public void init(DataSource dataSource) {
		this.simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);
	}

	/**************************************************************************
	 * business actions
	 * ************************************************************************
	 */
	public void register(Person person) {

	}

	public void login(Person person) {

	}

	public void addBuddy(Person per) {

	}

	public void removeBuddy(String person_id) {

	}

	public List<ActiveDevice> findBuddysActiveDevices(String buddy_id) {
		// TODO:
		return null;
	}
	
	/**************************************************************************
	 * query actions
	 * ************************************************************************
	 */
	public Boolean updateGPS(String personId, String deviceSN, Double latitude, Double longitude) {
		// 
		Map<String, String> args = new HashMap<String, String>();
		List cntList = this.simpleJdbcTemplate.
				queryForList("select 1 from ActiveDevice " +
				"where person_id = ? and device_sn = ? ",
				new Object[] {personId, deviceSN});
		
		// update or insert
		if (cntList.size() > 0) {			
			this.simpleJdbcTemplate.update("update ActiveDevice d"
					+ "set conn_datetime = ?, latitude = ?, longtitude = ?"
					+ "where person_id = ? and device_sn = ?", 
					new Object[] {new Date(), latitude, 
							longitude, personId, deviceSN });
		} else {
			this.simpleJdbcTemplate.update("INSERT into ActiveDevice "
					+ "(device_sn, conn_datetime, latitude, longtitude, loged_in, person_id, hiden) "
					+ "values ( ?, ?, ?, ?, ?, ?, ?);", 
					new Object[] {deviceSN, new Date(), latitude, 
							longitude, 1, personId, 0});
			
		}
		
		return true;
	}

	/**************************************************************************
	 * query actions
	 * ************************************************************************
	 */
	public List<Person> getAllPersons() {

		List<Person> ret = new ArrayList<Person>();

		// Retrieve the list of all vets.
		ret.clear();
		List pers = this.simpleJdbcTemplate.query(
				"SELECT person_id, password, email, nickname, gender ,department,telephone,hobby,talent,moodmsg "
						+ "FROM person " + "ORDER BY person_id, password",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class));

		ret.addAll(pers);

		return ret;
	}
	
	public Boolean checkPerson(Person per) {
		List pers = this.simpleJdbcTemplate.query(
				"SELECT person_id, password, email, nickname, gender ,department,telephone,hobby,talent,moodmsg "
						+ " FROM person "
						+ " WHERE person_id = ?"
						+ " AND password = ?"
						+ " ORDER BY person_id, password",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class), 
				new Object[] {per.getPerson_id(), per.getPassword()});

		if (pers.size() > 0)
			return true;
		else
			return false;
	}

	public Boolean checkPersonByName(Person per) {
		List pers = this.simpleJdbcTemplate.query(
				"SELECT person_id, password, email, nickname, gender ,department,telephone,hobby,talent,moodmsg "
						+ " FROM person "
						+ " WHERE person_id = ? "
						+ " ORDER BY person_id, password",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class),
				new Object[] {per.getPerson_id()});

		if (pers.size() > 0)
			return true;
		else
			return false;
	}
	
	/**
	 * @param person_id
	 * @return
	 */
	public Person getPerson(String person_id) {
		List<Person> pers = this.simpleJdbcTemplate.query(
				"SELECT person_id, password, email, nickname, gender ,department,telephone,hobby,talent,moodmsg "
						+ " FROM person "
						+ " WHERE person_id = ? "
						+ " ORDER BY person_id, password",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class),
				new Object[] {person_id});

		if (pers.size() > 0)
			return pers.get(0);
		else
			return null;
	}
	
	public ActiveDevice getMyDevice(Person per) {
		// Retrieve the list of all device.
		List<ActiveDevice> devices = this.simpleJdbcTemplate
				.query("SELECT id, device_sn, conn_datetime, latitude, longtitude,loged_in,person_id,hiden "
						+ "FROM activedevice p WHERE p.loged_in = '1' "
						+ "AND p.person_id = ? " + "ORDER BY id, device_sn",
						ParameterizedBeanPropertyRowMapper
								.newInstance(ActiveDevice.class),
						new Object[] {per.getPerson_id()});
		return devices.size() > 0 ? devices.get(0) : null;
	}
	
	/**
	 * @param person_id,password,email,nickname,gender
	 * @return
	 */
	public int addPerson(String person_id,String password ,String email,String nickname,String gender,String department,String telephone,String hobby,String talent,String moodmsg) {
		    Person per = new Person();
		    per.setPerson_id(person_id);
		    per.setPassword(password);
		    per.setEmail(email);
		    per.setNickname(nickname);
		    per.setGender(gender);
		    per.setDepartment(department);
		    per.setTelephone(telephone);
		    per.setHobby(hobby);
		    per.setTalent(talent);
		    per.setMoodmsg(moodmsg);
		    
		    
		    
		   int addPer = this.simpleJdbcTemplate.update(
		    	"INSERT INTO Person (person_id, password, email, nickname, gender,department,telephone,hobby,talent,moodmsg) values( ?, ? ,? ,? ,?,?,?,?,?,?,?)",
		    		new Object[] {per.getPerson_id(), per.getPassword(), per.getEmail(), per.getNickname(),per.getGender(),per.getBuddies(),per.getDepartment(),per.getTelephone(),per.getHobby(),per.getTalent(),per.getMoodmsg()});
		    		
			return addPer;
	}
	
	/**
	 * @param person_id
	 * @return
	 */
	public List<BuddyRequest> getPendingBuddyRequests(String person_id) {
		List<BuddyRequest> ret = this.simpleJdbcTemplate.query(
				"SELECT id, person_id, requester_id, reason, send_datetime, confirm "
						+ " FROM BuddyRequest "
						+ " WHERE person_id = ? "
						+ " AND confirm = 0"
						+ " ORDER BY person_id, requester_id",
				ParameterizedBeanPropertyRowMapper.newInstance(BuddyRequest.class),
				new Object[] {person_id});

		return ret;
	}
	
	/**
	 * @param person_id
	 * @return
	 */
	public List<BuddyRequest> getHistoryBuddyRequests(String person_id) {
		List<BuddyRequest> ret = this.simpleJdbcTemplate.query(
				"SELECT person_id, requester_id, reason, confirm "
						+ " FROM BuddyRequest "
						+ " WHERE person_id = ? "
						+ " AND confirm <> 0"
						+ " ORDER BY person_id, requester_id",
				ParameterizedBeanPropertyRowMapper.newInstance(BuddyRequest.class),
				new Object[] {person_id});

		return ret;
	}

	/**
	 * @param person_id
	 * @return
	 */
	public void accecptBuddyRequests(Integer req_id) {
		BuddyRequest req = 
			this.simpleJdbcTemplate.queryForObject("SELECT id, person_id, requester_id, reason, send_datetime, confirm"
				+ " FROM BuddyRequest WHERE id = ? ", 
				BuddyRequest.class, new Object[]{req_id});
		this.simpleJdbcTemplate.update(
				"INSERT INTO Buddy (person_id, buddy_id) values( ?, ? )",
				new Object[] {req.getPerson_id(), req.getRequester_id()});
		this.simpleJdbcTemplate.update(
				"INSERT INTO Buddy (person_id, buddy_id) values( ?, ? )",
				new Object[] {req.getRequester_id(), req.getPerson_id()});
		this.simpleJdbcTemplate.update(
				"UPDATE BuddyRequest SET confirm = ? WHERE id = ? ",
				new Object[] {1, req_id});
	}

	/**
	 * @param person_id
	 * @return
	 */
	public void declineBuddyRequests(Integer req_id) {
		this.simpleJdbcTemplate.update(
				"UPDATE BuddyRequest SET confirm = ? WHERE id = ? ",
				new Object[] {-1, req_id});
	}
	
	
	/**
	 * @param nickname
	 * @return
	 */
	public Person getPersonByNickname(String nickname) {
		List<Person> allPeople = getAllPersons();
		for (int i = 0; i < allPeople.size(); i++) {
			if (allPeople.get(i).getNickname() == nickname) {
				return allPeople.get(i);
			}
		}
		return null;
	}

	/**
	 * @return
	 */
	public List<ActiveDevice> getAllActiveDevices() {
		List<ActiveDevice> device = new ArrayList<ActiveDevice>();

		// Retrieve the list of all device.
		device.clear();
		List pers1 = this.simpleJdbcTemplate
				.query("SELECT id, device_sn, conn_datetime, latitude, longtitude,loged_in,person_id,hiden "
						+ "FROM activedevice p WHERE p.loged_in = '1' " + "ORDER BY id, device_sn",
						ParameterizedBeanPropertyRowMapper
								.newInstance(ActiveDevice.class));

		device.addAll(pers1);

		return device;
	}

	public List<Person> getPeopleOnline() {
		List<Person> peopleOnline = new ArrayList<Person>();

		// Retrieve the list of all buddy.
		peopleOnline.clear();
		List persOnline = this.simpleJdbcTemplate.query(
				"SELECT p.person_id, p.password, p.email, p.nickname, P.gender,P.department,P.telephone,P.hobby,P.talent,P.moodmsg " +
				"FROM person p WHERE p.person_id " +
				"in (SELECT b.person_id FROM activedevice b " +
					"WHERE b.loged_in = '1') " +
					"ORDER BY p.person_id",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class));

		peopleOnline.addAll(persOnline);

		return peopleOnline;
	}
	
	public List<Person> getBuddies(Person per) {
		List<Person> buddy = new ArrayList<Person>();

		// Retrieve the list of all buddy.
		buddy.clear();
		List<Person> pers2 = this.simpleJdbcTemplate.query(
				"SELECT p.person_id, p.password, p.email, p.nickname, p.gender,P.department,P.telephone,P.hobby,P.talent,P.moodmsg  " +
				"FROM person p WHERE p.person_id " +
				"in (SELECT b.buddy_id FROM buddy b " +
					"WHERE b.person_id = ? )" +
					"ORDER BY p.person_id",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class),
				new Object[] {per.getPerson_id()});

		buddy.addAll(pers2);

		return buddy;
	}

	public List<Person> getBlackList(Person per) {
		List<Person> buddy = new ArrayList<Person>();

		// Retrieve the list of all buddy.
		buddy.clear();
		List pers2 = this.simpleJdbcTemplate.query(
				"SELECT p.person_id, p.password, p.email, p.nickname, P.gender ,P.department,P.telephone,P.hobby,P.talent,P.moodmsg " +
				"FROM person p WHERE p.person_id " +
				"in (SELECT b.black_person_id FROM BlackList b " +
					"WHERE b.person_id = ? ) " +
					"ORDER BY p.person_id",
				ParameterizedBeanPropertyRowMapper.newInstance(Person.class),
				new Object[] {per.getPerson_id()});

		buddy.addAll(pers2);

		return buddy;
	}
	

	/**************************************************************************
	 * count actions
	 * ************************************************************************
	 */
	public Integer countBuddies(Person per) {
		return getBuddies(per).size();
	}
	
	public Integer countPeopleOnline() {
		return getPeopleOnline().size();
	}
	
	public Integer countAllPerson() {
		return this.getAllPersons().size();
	}
	
	public Integer countPendingReq(Person per) {
		return this.getPendingBuddyRequests(per.getPerson_id()).size();
	}
	
//	public Integer count
	
	
	/**************************************************************************
	 * getter setter
	 * ************************************************************************
	 */
	public void setSimpleJdbcTemplate(SimpleJdbcTemplate simpleJdbcTemplate) {
		this.simpleJdbcTemplate = simpleJdbcTemplate;
	}

}
